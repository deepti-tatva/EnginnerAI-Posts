{"version":3,"sources":["Components/CustomContainer.js","Components/Header.js","Components/CustomDialog.js","Services/AppService.js","Helper/Constants.js","Pages/HomePage.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["CustomContainer","props","Fragment","CssBaseline","Container","fixed","Typography","component","style","height","children","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Header","classes","className","AppBar","position","Toolbar","variant","color","title","CustomDialog","onClose","open","Dialog","aria-labelledby","DialogTitle","id","DialogContent","dividers","content","getApiData","url","urlData","Promise","resolve","reject","a","response","axios","get","params","HTTP_STATUS_CODE","ERROR_MESSAGES","HomePage","useState","pageCount","setPageCount","setOpen","rows","setContent","useEffect","setInterval","clearInterval","getRowsData","tags","page","status","alert","handleRowClick","useCallback","rowData","jsonData","JSON","stringify","options","onRowClick","rowsPerPage","data","columns","name","label","filter","searchable","display","Routes","path","App","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7aa5c6bd.chunk.js","sourcesContent":["import React from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default function CustomContainer(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container fixed>\r\n        <Typography component=\"div\" style={{ height: 'auto' }}>\r\n            {props.children}\r\n        </Typography>>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Header(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar variant=\"dense\">\r\n          <Typography variant=\"h6\" color=\"inherit\">\r\n           {props.title}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\n\r\nconst useStyles = makeStyles({\r\n \r\n});\r\n\r\nexport default function CustomDialog(props) {\r\n  const classes = useStyles();\r\n  const { onClose, open } = props;\r\n\r\n  const handleClose = () => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} aria-labelledby=\"dialog-title\" open={open}>\r\n      <DialogTitle id=\"dialog-title\">\r\n          {props.title}\r\n      </DialogTitle>\r\n      <DialogContent dividers>\r\n          {props.content}\r\n    </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nexport const getApiData = (url, urlData) => {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const response = axios.get(url, { params: urlData });\r\n            return resolve(response);\r\n        }\r\n        catch (err) {\r\n            return reject(err);\r\n        }\r\n    }\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const HTTP_STATUS_CODE = {\r\n    Success : 200,\r\n    InternalServer: 500\r\n}\r\n\r\nexport const ERROR_MESSAGES = {\r\n    InternalServer: 'Internal Server error occurred',\r\n    Error: 'Something went wrong!'\r\n}\r\n\r\nexport const API_TIMER = 10000;\r\n\r\nexport const ROWS_COUNT_PER_PAGE = 20;\r\n\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport CustomContainer from '../Components/CustomContainer';\r\nimport Header from '../Components/Header';\r\nimport CustomDialog from '../Components/CustomDialog';\r\nimport MUIDataTable from 'mui-datatables';\r\nimport { getApiData } from '../Services/AppService';\r\nimport { HTTP_STATUS_CODE, ERROR_MESSAGES, API_TIMER, ROWS_COUNT_PER_PAGE } from '../Helper/Constants';\r\n\r\nexport const HomePage = () => {\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [open, setOpen] = useState(false);\r\n    const [rows, setRows] = useState([]);\r\n    const [content, setContent] = useState('');\r\n\r\n    const columns = [\r\n        {\r\n            name: 'title',\r\n            label: 'Title',\r\n            options: {\r\n                filter: true,\r\n            }\r\n        },\r\n        {\r\n            name: 'url',\r\n            label: 'URL',\r\n            options: {\r\n                filter: false,\r\n            }\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Created At',\r\n            options: {\r\n                filter: true,\r\n                searchable: false,\r\n            }\r\n        },\r\n        {\r\n            name: 'author',\r\n            label: 'Author',\r\n            options: {\r\n                filter: false,\r\n            }\r\n        },\r\n        {\r\n            name: 'points',\r\n            label: 'Points',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'story_text',\r\n            label: 'story_text',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'comment_text',\r\n            label: 'comment_text',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'num_comments',\r\n            label: 'num_comments',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'story_id',\r\n            label: 'story_id',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'story_title',\r\n            label: 'story_title',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'story_url',\r\n            label: 'story_url',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n        {\r\n            name: 'parent_id',\r\n            label: 'parent_id',\r\n            options: {\r\n                filter: false,\r\n                searchable: false,\r\n                display: false\r\n            }\r\n        },\r\n\r\n        // \"created_at_i\": 1587459962,\r\n        // \"_tags\": [\r\n        //     \"story\",\r\n        //     \"author_pmontra\",\r\n        //     \"story_22933256\"\r\n        // ],\r\n        // \"objectID\": \"22933256\",\r\n        // \"_highlightResult\": {\r\n        //     \"title\": {\r\n        //         \"value\": \"The Elephant in the Architecture\",\r\n        //         \"matchLevel\": \"none\",\r\n        //         \"matchedWords\": []\r\n        //     },\r\n        //     \"url\": {\r\n        //         \"value\": \"https://martinfowler.com/articles/value-architectural-attribute.html\",\r\n        //         \"matchLevel\": \"none\",\r\n        //         \"matchedWords\": []\r\n        //     },\r\n        //     \"author\": {\r\n        //         \"value\": \"pmontra\",\r\n        //         \"matchLevel\": \"none\",\r\n        //         \"matchedWords\": []\r\n        //     }\r\n        // }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        const timerInterval = setInterval(() => {\r\n            setPageCount((pageCount) => pageCount + 1);\r\n        }, API_TIMER);\r\n\r\n        return (() => {\r\n            clearInterval(setInterval);\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getRowsData(pageCount);\r\n    }, [pageCount]);\r\n\r\n    const getRowsData = async (pageCount) => {\r\n        const url = \"https://hn.algolia.com/api/v1/search_by_date\";\r\n        const urlData = {\r\n            tags: 'story',\r\n            page: pageCount\r\n        }\r\n        const response = await getApiData(url, urlData);\r\n\r\n        if (response.status === HTTP_STATUS_CODE.Success) {\r\n\r\n        }\r\n        else if (response.status === HTTP_STATUS_CODE.InternalServer) {\r\n            alert(ERROR_MESSAGES.InternalServer);\r\n        }\r\n        else {\r\n            alert(ERROR_MESSAGES.Error);\r\n        }\r\n\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleRowClick = useCallback((rowData) =>\r\n    {\r\n        const jsonData = JSON.stringify(rowData);\r\n        setContent(jsonData);\r\n        setOpen(true);\r\n    },[]);\r\n\r\n    const options = {\r\n        onRowClick:(rowData) => handleRowClick(rowData),\r\n        rowsPerPage:ROWS_COUNT_PER_PAGE,\r\n      };\r\n\r\n    return (\r\n        <>\r\n            <Header title=\"Posts Information\"></Header>\r\n            <CustomContainer>\r\n                <MUIDataTable\r\n                    title={\"Posts\"}\r\n                    data={rows}\r\n                    columns={columns}\r\n                    options={options}\r\n                />\r\n                <CustomDialog title=\"Post in JSON\" content={content} onClose={handleClose}></CustomDialog>\r\n            </CustomContainer>\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Switch, Route} from 'react-router-dom';\r\nimport { HomePage } from './Pages/HomePage';\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" component={HomePage}></Route>\r\n        </Switch>\r\n    )\r\n}","import React, { Suspense} from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport { Routes } from './Routes';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Suspense fallback =\"\">\n      <Routes></Routes>\n    </Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}